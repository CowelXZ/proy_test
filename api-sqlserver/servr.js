const express = require('express');
const { connectDB, sql } = require('./db'); // Importar SQL correctamente
const bodyParser = require('body-parser');
const fs = require('fs'); // ‚úÖ Importar m√≥dulo para manejar archivos
const app = express();
const PORT = 3000;
app.use('/uploads', express.static('uploads'));

// Conectar a la base de datos con manejo de errores
connectDB().catch((err) => {
  console.error('‚ùå Error al conectar a la BD:', err);
  process.exit(1); // Salir si la conexi√≥n falla
});

// Middleware
app.use(bodyParser.json());

// ‚úÖ Endpoint de Prueba
app.get('/', (req, res) => {
  res.send('API con Node.js y SQL Server funcionando üöÄ');
});

// ‚úÖ Agregar un usuario
app.post('/addUser', async (req, res) => {
  try {
    const { nombre, apellidos, telefono, rfc, usuario, contrasena, cumpleanos, departamento } = req.body;

    if (!nombre || !apellidos || !telefono || !rfc || !usuario || !contrasena || !cumpleanos || !departamento) {
      return res.status(400).json({ message: 'Todos los campos son necesarios' });
    }

    const request = new sql.Request();
    request.input('nombre', sql.NVarChar, nombre);
    request.input('apellidos', sql.NVarChar, apellidos);
    request.input('telefono', sql.NVarChar, telefono);
    request.input('rfc', sql.NVarChar, rfc);
    request.input('usuario', sql.NVarChar, usuario);
    request.input('contrasena', sql.NVarChar, contrasena);
    request.input('cumpleanos', sql.Date, cumpleanos);
    request.input('departamento', sql.NVarChar, departamento);

    await request.query(`
            INSERT INTO Usuarios (nombre, apellidos, telefono, rfc, usuario, contrasena, cumpleanos, departamento)
            VALUES (@nombre, @apellidos, @telefono, @rfc, @usuario, @contrasena, @cumpleanos, @departamento)
        `);

    res.status(201).json({ message: '‚úÖ Usuario agregado con √©xito' });
  } catch (error) {
    console.error('‚ùå Error al agregar usuario:', error);
    res.status(500).json({ message: 'Error al agregar usuario' });
  }
});

// ‚úÖ Obtener usuarios con orden din√°mico
app.get('/getUsers', async (req, res) => {
  try {
    const { orderBy } = req.query;
    let orderClause = '';

    switch (orderBy) {
      case 'Cumplea√±os':
        orderClause = 'ORDER BY cumpleanos ASC';
        break;
      case 'Fecha Registro':
        orderClause = 'ORDER BY id DESC'; // Suponiendo que el ID es incremental
        break;
      case 'Departamento':
        orderClause = 'ORDER BY departamento ASC';
        break;
    }

    const request = new sql.Request();
    const result = await request.query(`SELECT * FROM Usuarios ${orderClause}`);

    res.status(200).json(result.recordset);
  } catch (error) {
    console.error('‚ùå Error al obtener usuarios:', error);
    res.status(500).json({ message: 'Error al obtener los usuarios' });
  }
});

// ‚úÖ Eliminar un usuario
app.delete('/deleteUser/:id', async (req, res) => {
  try {
    const userId = parseInt(req.params.id, 10);
    if (isNaN(userId)) {
      return res.status(400).json({ message: 'ID inv√°lido' });
    }

    const request = new sql.Request();
    request.input('id', sql.Int, userId);

    const result = await request.query('DELETE FROM Usuarios WHERE id = @id');

    if (result.rowsAffected[0] > 0) {
      res.status(200).json({ message: '‚úÖ Usuario eliminado con √©xito' });
    } else {
      res.status(404).json({ message: 'Usuario no encontrado' });
    }
  } catch (error) {
    console.error('‚ùå Error al eliminar usuario:', error);
    res.status(500).json({ message: 'Error al eliminar usuario' });
  }
});

app.post('/addMovie', async (req, res) => {
  let { titulo, director, duracion, idiomas, subtitulos, genero, clasificacion, sinopsis, poster } = req.body;

  console.log("üì• Datos recibidos:", { titulo, director, duracion, idiomas, genero, clasificacion, sinopsis });

  if (!titulo || !director || !duracion || !idiomas || !genero || !clasificacion || !sinopsis) {
    return res.status(400).json({ message: "Todos los campos son obligatorios." });
  }

  console.log("‚è≥ Duraci√≥n antes de validaci√≥n:", duracion);

  if (!duracion.trim()) {
    console.log("‚õî Error: Duraci√≥n vac√≠a");
    return res.status(400).json({ message: "Duraci√≥n no puede estar vac√≠a." });
  }

  const duracionValida = /^([01]?\d|2[0-3]):[0-5]\d:[0-5]\d$/.test(duracion);
  if (!duracionValida) {
    console.log("‚õî Error: Duraci√≥n con formato incorrecto ‚Üí", duracion);
    return res.status(400).json({ message: "Formato de duraci√≥n inv√°lido. Usa HH:mm:ss" });
  }

  try {
    console.log("‚úÖ Insertando duraci√≥n en SQL:", duracion);
    
    const request = new sql.Request();
    request.input('titulo', sql.NVarChar, titulo);
    request.input('director', sql.NVarChar, director);
    request.input('duracion', sql.NVarChar, duracion); // ‚úÖ Enviar como string
    request.input('idiomas', sql.NVarChar, idiomas);
    request.input('subtitulos', sql.Bit, subtitulos === "Si" ? 1 : 0);
    request.input('genero', sql.NVarChar, genero);
    request.input('clasificacion', sql.NVarChar, clasificacion);
    request.input('sinopsis', sql.NVarChar, sinopsis);
    request.input('poster', sql.NVarChar, poster || null);

    await request.query(`
          INSERT INTO Peliculas (titulo, director, duracion, idiomas, subtitulos, genero, clasificacion, sinopsis, poster)
          VALUES (@titulo, @director, @duracion, @idiomas, @subtitulos, @genero, @clasificacion, @sinopsis, @poster)
      `);

    console.log("‚úÖ Pel√≠cula registrada con √©xito:", titulo);
    res.status(201).json({ message: "Pel√≠cula registrada con √©xito" });
  } catch (error) {
    console.error("‚ùå Error al registrar pel√≠cula:", error);
    res.status(500).json({ message: "Error en el servidor" });
  }
});

app.get('/getMovies', async (req, res) => {
  try {
    const request = new sql.Request();
    const result = await request.query('SELECT * FROM Peliculas ORDER BY id DESC');

    res.status(200).json(result.recordset);
  } catch (error) {
    console.error("‚ùå Error al obtener pel√≠culas:", error);
    res.status(500).json({ message: "Error al obtener pel√≠culas" });
  }
});

app.delete('/deleteMovie/:id', async (req, res) => {
  try {
      const movieId = parseInt(req.params.id, 10);

      if (isNaN(movieId)) {
          return res.status(400).json({ message: 'ID de pel√≠cula inv√°lido' });
      }

      const request = new sql.Request();
      request.input('id', sql.Int, movieId);

      const result = await request.query('DELETE FROM Peliculas WHERE id = @id');

      if (result.rowsAffected[0] > 0) {
          console.log(`‚úÖ Pel√≠cula con ID ${movieId} eliminada`);
          res.status(200).json({ message: 'Pel√≠cula eliminada con √©xito' });
      } else {
          console.log(`‚ö†Ô∏è No se encontr√≥ la pel√≠cula con ID ${movieId}`);
          res.status(404).json({ message: 'Pel√≠cula no encontrada' });
      }
  } catch (error) {
      console.error('‚ùå Error al eliminar pel√≠cula:', error);
      res.status(500).json({ message: 'Error al eliminar pel√≠cula' });
  }
});app.post('/addFunction', async (req, res) => {
  try {
    let { titulo, horario, fecha, sala, tipo_sala, idioma, poster } = req.body;

    console.log("üì• Datos recibidos:", { titulo, horario, fecha, sala, tipo_sala, idioma, poster });

    if (!titulo || !horario || !fecha || !sala || !tipo_sala || !idioma) {
      return res.status(400).json({ message: "Todos los campos son obligatorios." });
    }

    // Validar y formatear horario
    const horarioValido = /^([01]?\d|2[0-3]):[0-5]\d:[0-5]\d$/.test(horario);
    if (!horarioValido) {
      console.log("‚õî Error: Formato de horario incorrecto ‚Üí", horario);
      return res.status(400).json({ message: "Formato de horario inv√°lido. Usa HH:mm:ss" });
    }

    console.log("‚è≥ Horario formateado para SQL:", horario);

    const request = new sql.Request();
    request.input('titulo', sql.NVarChar, titulo);
    request.input('horario', sql.NVarChar, horario); // Enviamos como string v√°lido
    request.input('fecha', sql.Date, fecha);
    request.input('sala', sql.Int, sala);
    request.input('tipo_sala', sql.NVarChar, tipo_sala);
    request.input('idioma', sql.NVarChar, idioma);
    request.input('poster', sql.NVarChar, poster || null);

    await request.query(`
      INSERT INTO Funciones (titulo, horario, fecha, sala, tipo_sala, idioma, poster)
      VALUES (@titulo, @horario, @fecha, @sala, @tipo_sala, @idioma, @poster)
    `);

    console.log("‚úÖ Funci√≥n agregada con √©xito:", titulo);
    res.status(201).json({ message: "‚úÖ Funci√≥n agregada con √©xito" });

  } catch (error) {
    console.error("‚ùå Error al agregar funci√≥n:", error);
    res.status(500).json({ message: "Error en el servidor" });
  }
});

app.get('/getFunctions', async (req, res) => {
  try {
    console.log("üì° Obteniendo funciones...");
    const request = new sql.Request();
    const result = await request.query('SELECT * FROM Funciones ORDER BY fecha DESC, horario ASC');

    console.log("‚úÖ Funciones obtenidas:", result.recordset.length);
    res.status(200).json(result.recordset);
  } catch (error) {
    console.error("‚ùå Error al obtener funciones:", error);
    res.status(500).json({ message: "Error al obtener funciones" });
  }
});

app.delete('/deleteFunction/:id', async (req, res) => {
  try {
    const functionId = parseInt(req.params.id, 10);
    if (isNaN(functionId)) {
      return res.status(400).json({ message: 'ID inv√°lido' });
    }

    console.log("üóëÔ∏è Eliminando funci√≥n con ID:", functionId);

    const request = new sql.Request();
    request.input('id', sql.Int, functionId);
    const result = await request.query('DELETE FROM Funciones WHERE id = @id');

    if (result.rowsAffected[0] > 0) {
      console.log("‚úÖ Funci√≥n eliminada con √©xito:", functionId);
      res.status(200).json({ message: "‚úÖ Funci√≥n eliminada con √©xito" });
    } else {
      console.log("‚ö†Ô∏è Funci√≥n no encontrada:", functionId);
      res.status(404).json({ message: "Funci√≥n no encontrada" });
    }
  } catch (error) {
    console.error("‚ùå Error al eliminar funci√≥n:", error);
    res.status(500).json({ message: "Error al eliminar funci√≥n" });
  }
});



//Muerte Mentalconst fs = require('fs');
const multer = require('multer');
const path = require('path');

// üî• Verifica que la carpeta "uploads/" existe, si no, la crea
const uploadPath = 'uploads/';
if (!fs.existsSync(uploadPath)) {
  fs.mkdirSync(uploadPath, { recursive: true });
}

// Configurar almacenamiento de im√°genes en la carpeta "uploads"
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, uploadPath); // ‚úÖ Guarda las im√°genes en "uploads/"
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + path.extname(file.originalname)); // ‚úÖ Nombre √∫nico
  }
});
//uploadImage
const upload = multer({ storage });

// üìå Endpoint para subir im√°genes
app.post('/uploadImage', upload.single('poster'), (req, res) => {
  if (!req.file) {
    return res.status(400).json({ message: "No se subi√≥ ninguna imagen" });
  }
  
  const imageUrl = `http://localhost:3000/uploads/${req.file.filename}`;
  res.status(200).json({ imageUrl });
});



app.use((err, req, res, next) => {
  console.error('‚ùå Error inesperado:', err);
  res.status(500).json({ message: 'Error interno del servidor' });
});

app.listen(PORT, () => {
  console.log(`üöÄ Servidor corriendo en http://localhost:${PORT}`);
});
